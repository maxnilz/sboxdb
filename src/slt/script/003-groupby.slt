# Generated by sltgen tool with gpt-4.1
# Test COUNT() and GROUP BY aggregation

# 1. Create a table for orders
statement ok
CREATE TABLE orders (
    order_id INTEGER PRIMARY KEY,
    customer_id INTEGER NOT NULL,
    amount DECIMAL(10,2) NOT NULL,
    status TEXT
);

# 2. Insert orders. Some customers have multiple orders. Some statuses are repeated. Some status are NULL.
statement ok
INSERT INTO orders (order_id, customer_id, amount, status) VALUES
    (1, 10, 42.50, 'shipped'),
    (2, 11, 99.99, 'processing'),
    (3, 10, 10.00, 'shipped'),
    (4, 12, 20.00, NULL),
    (5, 11, 33.33, 'cancelled'),
    (6, 13, 120.00, 'shipped'),
    (7, 12, 50.00, 'processing'),
    (8, 10, 20.00, NULL),
    (9, 13, 15.00, 'shipped');

# 3. Count number of orders per customer
query rowsort
SELECT customer_id, COUNT(*) AS num_orders
FROM orders
GROUP BY customer_id;
----
10 3
11 2
12 2
13 2

# 4. Count using COUNT(*) and COUNT(status), check NULL handling (status=NULL rows skipped in COUNT(status))
# COUNT(column) for non_null is not supported yet
statement error
SELECT status, COUNT(*) AS total_orders, COUNT(status) AS non_null_status
FROM orders
GROUP BY status;

# 5. Group by multiple columns: customer_id and status
query rowsort
SELECT customer_id, status, COUNT(*) AS cnt
FROM orders
GROUP BY customer_id, status;
----
10 NULL 1
10 'shipped' 2
11 'cancelled' 1
11 'processing' 1
12 NULL 1
12 'processing' 1
13 'shipped' 2

# 6. Count all rows with status = 'shipped'
query nosort
SELECT COUNT(*) FROM orders WHERE status = 'shipped';
----
4

# 7. Count all rows in the table
query nosort
SELECT COUNT(*) FROM orders;
----
9

# -- HAVING clause is not supported: replace with manual test
# 9. List the number of orders per customer for reference, so manual HAVING check is possible
query rowsort
SELECT customer_id, COUNT(*) AS num_orders
FROM orders
GROUP BY customer_id;
----
10 3
11 2
12 2
13 2
