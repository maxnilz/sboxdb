import argparse
import logging
from pathlib import Path

from dotenv import load_dotenv, find_dotenv

from generator import SltGenerator, GenerateSltResponse

_root_dir: Path = Path(__file__).parent.joinpath("../..").resolve()


def get_log_level(level: str) -> int:
    level_upper = level.upper()
    # We are targeting python 3.10 that's why we need to use getLevelName which
    # is deprecated, but still there for backwards compatibility.
    level_name = logging.getLevelName(level_upper)  # type: ignore
    if level_upper != "INFO" and isinstance(level_name, int):
        return level_name
    return logging.getLevelName("INFO")  # type: ignore


def main():
    parser = argparse.ArgumentParser(description="SLT Generator CLI")
    parser.add_argument(
        "--model", default="gpt-4.1", help="Model to use (default: %(default)s)"
    )
    parser.add_argument(
        "--sql-spec-path",
        type=Path,
        default=_root_dir.joinpath("src/sql/sql.md").resolve(),
        help="Path to SQL spec (default: %(default)s)",
    )
    parser.add_argument(
        "--slt-binary-path",
        type=Path,
        default=_root_dir.joinpath("target/debug/slt").resolve(),
        help="Path to SLT binary (default: %(default)s)",
    )
    parser.add_argument(
        "--prompt",
        default="A slt script to test basic sql operations",
        help="Prompt for generation (default: '%(default)s'), e.g., 'A slt script to test basic join', 'A slt script to test count and group by aggregation'",
    )
    parser.add_argument(
        "--iteration-limit",
        default=2,
        type=int,
        help="Maximum number of iterations (default: %(default)s)",
    )
    parser.add_argument(
        "--output",
        type=str,
        default="generated.slt",
        help="Path to save the output script (default: '%(default)s)",
    )
    parser.add_argument(
        "--log-level",
        type=str,
        default="INFO",
        help="Logging level (default: '%(default)s')",
    )
    parser.add_argument(
        "--log-file",
        type=Path,
        default=None,
        help="Path to log file (default: None)",
    )
    parser.add_argument(
        "--answer-dir",
        type=Path,
        default=_root_dir.joinpath("tools/sltgen/gen").resolve(),
        help="Path to save intermediate answers for validation (default: %(default)s)",
    )
    args = parser.parse_args()

    model = args.model
    sql_spec_path: Path = args.sql_spec_path
    slt_binary_path: Path = args.slt_binary_path
    prompt = args.prompt
    iterations_limit = args.iteration_limit
    output_path = args.output
    log_level = args.log_level
    log_file = args.log_file
    answer_dir = args.answer_dir

    log_handlers: list[logging.Handler] = []
    if log_file:
        log_handlers.append(logging.FileHandler(log_file.expanduser().resolve()))

    from rich.console import Console
    from rich.logging import RichHandler

    log_handlers.append(RichHandler(console=Console(stderr=True), rich_tracebacks=True))

    if len(log_handlers) > 0:
        logging.basicConfig(
            level=get_log_level(log_level or "INFO"),
            format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
            handlers=log_handlers,
        )

    generator = SltGenerator(
        sql_spec_path, slt_binary_path, iterations_limit, answer_dir
    )
    resp: GenerateSltResponse = generator.generate(model, prompt)

    from rich.console import Console
    from rich.pretty import pprint
    from rich.rule import Rule
    from rich.table import Table

    console = Console(stderr=True)

    for msg in resp.messages:
        pprint(msg, console=console)

    usage = resp.usage
    table = Table(title="Usage")
    table.add_column("Metric", justify="left", no_wrap=True)
    table.add_column("Value", justify="right", no_wrap=True)
    table.add_row("Requests", str(usage.requests))
    table.add_row(
        "Request Tokens",
        str(usage.input_tokens) if usage.input_tokens else "?",
    )
    table.add_row(
        "Response Tokens",
        str(usage.output_tokens) if usage.output_tokens else "?",
    )
    table.add_row(
        "Total Tokens",
        str(usage.total_tokens) if usage.total_tokens else "?",
    )
    console.print(table)

    console.print(Rule())

    with open(output_path, "w") as f:
        f.write("# Generated by sltgen tool with gpt-4.1\n")
        f.write(resp.slt_script)


if __name__ == "__main__":
    load_dotenv(dotenv_path=find_dotenv(usecwd=True))
    main()
